//@version=4
study("Engulfing Candles", overlay = true , max_bars_back=3000)
//strategy("Engulfing Candles") //keep this commented out unless backtesting

//General Definitions
greenCandle = close > open
upCandle = close >= open
redCandle = close < open


openBarPrevious = open[1]
closeBarPrevious = close[1]
lowBarPrevious = low[1]
highBarPrevious = high[1]
indexPrevious = bar_index[1]

openBarCurrent = open
closeBarCurrent = close
lowBarCurrent = low
highBarCurrent = high
indexCurrent = bar_index
stepEngulf = 0.5

tdo = security(syminfo.tickerid, timeframe.period, open)
pdc = security(syminfo.tickerid, timeframe.period, close[1])
pdh = security(syminfo.tickerid, timeframe.period, high[1])
pdl = security(syminfo.tickerid, timeframe.period, low[1])

gapUpPct = tdo > pdc ? true : false
gapDnPct = tdo < pdc ? true : false

gap = abs(tdo-pdc)

bullishEngulfing = false
bearishEngulfing = false


//If current bar open is less than equal to the previous bar close AND current bar open is less than previous bar open AND current bar close is greater than previous bar open + atr(14) THEN True

if (gapUpPct)
    bullishEngulfing := (openBarCurrent - gap <= closeBarPrevious) and (openBarCurrent < openBarPrevious) and (closeBarCurrent > openBarPrevious + atr(14)*stepEngulf)    
else
    bullishEngulfing := (openBarCurrent <= closeBarPrevious) and (openBarCurrent < openBarPrevious)  and (closeBarCurrent > openBarPrevious + atr(14)*stepEngulf)

//If current bar open is greater than equal to previous bar close AND current bar open is greater than previous bar open AND current bar close is less than previous bar open - atr(14) THEN True
if (gapDnPct)
    bearishEngulfing := (openBarCurrent + gap >= closeBarPrevious) and (openBarCurrent > openBarPrevious) and (closeBarCurrent < openBarPrevious - atr(14)*stepEngulf)
else
    bearishEngulfing := (openBarCurrent >= closeBarPrevious) and (openBarCurrent > openBarPrevious) and (closeBarCurrent < openBarPrevious - atr(14)*stepEngulf)

chestLength = abs(close-open)
chestLengthPrevious = abs(close[1]-open[1])

var chestCoef = 10

previousGreen = close[1] > open[1]
previousRed = open[1] > close[1]


lookBack = 4
var proximal = 0.0
distal = 0.0
line l = na
line m = na
var lineIndex = 0

if (bullishEngulfing)

    proximal := openBarPrevious
    distal := lowBarPrevious
    l := line.new(bar_index,proximal,bar_index[1],proximal,extend=extend.left,color = color.green,width=1)
    // m := line.new(bar_index,distal,bar_index[lineIndex],distal,extend=extend.left,color = color.green,width=1)
    // line.delete(m[1])

if not bullishEngulfing
    if previousGreen and greenCandle and chestLength > chestCoef * chestLengthPrevious
        for i = 1 to lookBack
            if close[i] < open[i]
                lineIndex := i
                break        
        proximal := open[lineIndex]
        distal := low[lineIndex]        
        l := line.new(bar_index,proximal,bar_index[lineIndex],proximal,extend=extend.left,color = color.green,width=1)
        bullishEngulfing := true
       

if (bearishEngulfing)

    proximal := openBarPrevious
    distal := highBarPrevious
    l := line.new(bar_index,proximal,bar_index[1],proximal,extend=extend.left,color = color.red,width=1)
    // m:= line.new(bar_index,distal,bar_index[lineIndex],distal,extend=extend.left,color = color.red,width=1)
    // line.delete(m[1])

if not bearishEngulfing
    if previousRed and redCandle and chestLength > chestCoef * chestLengthPrevious
        for i = 1 to lookBack
            if close[i] > open[i]
                lineIndex := i
                break
        proximal := open[lineIndex]
        distal := high[lineIndex]        
        l := line.new(bar_index,proximal,bar_index[lineIndex],proximal,extend=extend.left,color = color.red,width=1)
        bearishEngulfing := true



for i = 0 to 1000 by 1
    if not na(l[i])
        if redCandle
            if line.get_y1(l[i]) > low and line.get_y1(l[i]) < high and line.get_x1(l[i]) != bar_index
                line.delete(l[i])
        if greenCandle
            if line.get_y1(l[i]) > low and line.get_y1(l[i]) < high and line.get_x1(l[i]) != bar_index
                line.delete(l[i])
           
plotshape(bullishEngulfing, style = shape.triangleup, location = location.belowbar, color = color.green,  size = size.tiny)
plotshape(bearishEngulfing, style = shape.triangledown , location = location.abovebar, color = color.red, size = size.tiny)

//================================BACKTEST================================//

// === INPUT BACKTEST RANGE ===
// FromMonth = input(defval = 1, title = "From Month", minval = 1, maxval = 12)
// FromDay = input(defval = 1, title = "From Day", minval = 1, maxval = 31)
// FromYear = input(defval = 2017, title = "From Year", minval = 2017)
// ToMonth = input(defval = 1, title = "To Month", minval = 1, maxval = 12)
// ToDay = input(defval = 1, title = "To Day", minval = 1, maxval = 31)
// ToYear = input(defval = 9999, title = "To Year", minval = 2017)

// // === FUNCTION EXAMPLE ===
// start = timestamp(FromYear, FromMonth, FromDay, 00, 00) // backtest start window
// finish = timestamp(ToYear, ToMonth, ToDay, 23, 59) // backtest finish window
// window() => time >= start and time <= finish ? true : false // create function "within window of time"

// === EXECUTION === //Keep this commented out unless backtesting
// strategy.entry("L", strategy.long, 25000, when = bullishEngulfing == 1 and window()) // buy long when "within window of time" AND crossover
// strategy.exit("exit", "L", profit = 1000, loss = 50)

// strategy.entry("S", strategy.short, 25000, when = bearishEngulfing == 1 and window()) // buy long when "within window of time" AND crossover
// strategy.exit("exit", "S", profit = 1000, loss = 50)
